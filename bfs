#include <stdio.h>

void BFS(int a[20][20], int source, int n) {
    int queue[20], f = 0, r = -1, u, v, visited[20] = {0};
    queue[++r] = source;
    visited[source] = 1;

    while (f <= r) {
        u = queue[f++];

        for (v = 0; v < n; v++) {
            if (a[u][v] == 1 && visited[v] == 0) {
                queue[++r] = v;
                visited[v] = 1;
            }
        }
    }
}


int main() {

    int n, a[20][20], i, j, visited[20] = {0}, source;
    printf("Enter the number of vertices:");
    scanf("%d", &n);

    printf("\nEnter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);

    printf("\nEnter the source node:");
    scanf("%d", &source);

    visited[source] = 1;
    BFS(a, source, n);

    printf("\nNodes reachable from the source node:\n");
    for (i = 0; i < n; i++) {
        if (visited[i] != 0)
            printf("Node %d is reachable\n", i);
        else
            printf("Node %d is not reachable\n", i);
    }

    return 0;
}



â€”-------------------------------------------------------------------


#include <stdio.h>

void BFS(int a[20][20], int source, int n);

int main() {

    int n, a[20][20], i, j, visited[20] = {0}, source;
    printf("Enter the number of vertices:");
    scanf("%d", &n);

    printf("\nEnter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);

    printf("\nEnter the source node:");
    scanf("%d", &source);

    visited[source] = 1;
    BFS(a, source, n);

    printf("\nNodes reachable from the source node:\n");
    for (i = 0; i < n; i++) {
        if (visited[i] != 0)
            printf("Node %d is reachable\n", i);
        else
            printf("Node %d is not reachable\n", i);
    }

    return 0;
}

// BFS function definition
void BFS(int a[20][20], int source, int n) {
    int queue[20], f = 0, r = -1, u, v, visited[20] = {0};
    queue[++r] = source;
    visited[source] = 1;

    while (f <= r) {
        u = queue[f++];

        for (v = 0; v < n; v++) {
            if (a[u][v] == 1 && visited[v] == 0) {
                queue[++r] = v;
                visited[v] = 1;
            }
        }
    }
}
