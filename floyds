
#include<stdio.h>

#define INF 999

int min(int,int);
void floyds(int p[10][10],int n);

int min(int a,int b) {
    if(a < b)
        return a;
    else
        return b;
}

void floyds(int p[10][10], int n) {
    int i, j, k;
    for(k = 1; k <= n; k++) {
        for(i = 1; i <= n; i++) {
            for(j = 1; j <= n; j++) {
                if(p[i][k] + p[k][j] < p[i][j]) {
                    p[i][j] = p[i][k] + p[k][j];
                }
            }
        }
    }
}

int main() {
    int p[10][10], n, e, u, v, w, i, j;
    
    printf("\nEnter the number of vertices: ");
    scanf("%d", &n);
    printf("\nEnter the number of edges: ");
    scanf("%d", &e);
    
    // Initialize the matrix with INF
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            p[i][j] = INF;
        }
    }
    
    // Input the edges and weights
    for(i = 1; i <= e; i++) {
        printf("\nEnter the end vertices of edge %d with its weight: ", i);
        scanf("%d %d %d", &u, &v, &w);
        p[u][v] = w;
    }

    printf("\nMatrix of input data:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++)
            printf("%d\t", p[i][j]);
        printf("\n");
    }

    floyds(p, n);

    printf("\nShortest paths:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            if(i != j && p[i][j] != INF) {
                printf("Shortest path from %d to %d is %d\n", i, j, p[i][j]);
            }
        }
    }

    return 0;
}

